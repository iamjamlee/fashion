<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <!-- 引入样式 -->
  <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-default/index.css">
  <title>todo-list</title>
</head>
<body>
    <div id="app">
        <p class="header">备忘录</p>
    	<el-input 
    	  size="30px"
    	  placeholder="请输入要做的事情"
    	  v-model="txt"
    	  @keyup.enter.native="addNew">
    		
    	</el-input>

    	<div id="input_txt">
			<el-tag
			  color="blue"
			  :key="tag"
			  v-for="tag in dynamicTags"
			  :closable="true"
			  :close-transition="false"
			  @close="handleClose(tag)"
			>
			{{tag}}
			</el-tag>
			<el-input
              
			  class="input-new-tag"
			  v-if="inputVisible"
			  v-model="inputValue"
			  ref="saveTagInput"
			  size="mini"
			  @keyup.enter.native="handleInputConfirm"
			  @blur="handleInputConfirm"
			>
			</el-input>
	        <el-button v-else class="button-new-tag" size="small" @click="showInput">+ New Tag</el-button>   		
    	</div>
    	<hr style="color: #ccc; margin-top: 30px">

    	<div id="show">
		  <el-table
		    :data="notes"
		    border
		    style="width: 100%">
		    <el-table-column
		      label="内容"
		      width="180">
		      <template scope="scope">
		        <span style="margin-left: 10px">{{ scope.row.text }}</span>
		      </template>
		    </el-table-column>
		    <el-table-column
		      label="标签"
		      width="180">
		      <template scope="scope">
				<el-tag
				  color="blue"
				  :key="label_tag"
				  v-for="label_tag, index in scope.row.label"
				>
				{{label_tag}}
				</el-tag>
		      </template>
		    </el-table-column>
		    <el-table-column label="操作">
		      <template scope="scope">
		        <el-button
		          size="small"
		          @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
		        <el-button
		          size="small"
		          type="danger"
		          @click="handleDelete(scope.$index, scope.row)">删除</el-button>
		      </template>
		    </el-table-column>
		  </el-table>
		  <el-dialog title="编辑" v-model="dialogVisible" size="tiny" @close="edit()">
			  <el-input
			    v-model="edt_txt" placeholder="请编辑">
			  </el-input>
			  <span slot="footer" class="dialog-footer">
			    <el-button @click="dialogVisible = false">取 消</el-button>
			    <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
			  </span>
		  </el-dialog>
    	</div>
    </div>

</body>

  <!-- 先引入 Vue -->
  <script src="../vue.js"></script>
  <!-- 引入组件库 -->
  <script src="https://unpkg.com/element-ui/lib/index.js"></script>
  <script src="https://unpkg.com/vuex@2.0.0"></script>
  <script>

		const state = {
		    notes:[],
		    activeNote:''
		}

		const mutations = {
		    //添加笔记
		    ADD_NOTE(state, note){
		    	const newAdd = {
		    		text: note.text,
		    		label: note.label
		    	}
		        state.notes.push(newAdd)
		        state.activeNote = note.text
		    },
		    //编辑笔记
		    EDIT_NOTE(state,text){
		    	state.notes.filter(function(x, index){
                    if (x.text == state.activeNote) {
                        state.notes.text = text
                    }
		    	})
		        state.activeNote.text = text
		    },
		    // 设置当前激活的笔记
		    SET_ACTIVE_NOTE(state,text){
		        state.activeNote = text
		    },
		    //删除笔记
		    DELETE_NOTE(state, index){
		        state.notes.splice(index, 1)
		        state.activeNote = state.notes[0]
		    }
		}

		const actions = {
		    addNote(context, note){
		        context.commit('ADD_NOTE', note)
		    },
		    editNote(context,text){
		        context.commit("EDIT_NOTE",text)
		    },
		    updateActiveNote(context,note){
		        context.commit('SET_ACTIVE_NOTE',note)
		    },
		    deleteNote(context, index){
		        context.commit('DELETE_NOTE', index)
		    }
		}

		const getters = {
		  notes: state => state.notes,
		  activeNote: state => state.activeNote
		}
    store = new Vuex.Store({
    	state,
	    mutations,
	    actions,
	    getters
    })

  	new Vue({
  		el: "#app",

  		store,

  		data: {
  			dynamicTags: ["生活", "旅行", "学校"],
  			inputVisible: false,
  			inputValue: '',
  			txt: '',
  			dialogVisible: false,
  			edt_txt: ''
  		},

        watch: {
            edt_txt: function (valOld, newValue) {
            	console.log("watch")
            }
        },

        computed: {
            notes () {
            	console.log(this.$store.getters.notes)
            	return this.$store.getters.notes
            }
        },

  		methods: {
  			addNew() {
  				var note = {
  					text: this.txt,
  					label: this.dynamicTags
  				}
  				this.$store.dispatch('addNote', note)
  			},

  			handleClose(tag) {
  				
  				this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1)
  			},

  			showInput() {
  				this.inputVisible = true
  				this.$nextTick(function () {
  					this.$refs.saveTagInput.$refs.input.focus()
  				})
  			},

  			handleInputConfirm() {
  				var inputValue = this.inputValue
  				if (inputValue) {
  					this.dynamicTags.push(inputValue)
  				}
  				this.inputVisible = false
  				this.inputValue = ''
  			},


	        handleEdit(index, row) {
	        	this.dialogVisible = true
	        	this.$store.dispatch('updateActiveNote', row)
	        },
            
            edit() {      	
            	var arr = [{aa:1}, {aa:2}];
				var arr2 = arr.filter(function(x, index) {
					console.log(x.aa)
				return index % 3 === 0 || x >= 8;
				}); 
				console.log(arr2); //[1, 4, 7, 8, 9, 10]
	        	this.$store.dispatch('editNote', this.edt_txt)
	        	this.edt_txt = ''
            },

	        handleDelete(index, row) {
	        	this.$store.dispatch('deleteNote', index)
	        }
  		}
  	})
  </script>
  <style type="text/css">
    #app {
    	width: 600px;
    	height: 600px;
    	text-align: center;
    	margin: 0 auto;
    }
  	.header {
  		font-size: 24px;
  		color: red;
  	}
  	#input_txt {
  		margin-top: 50px;
        padding-left: 20px;
  	}
  	#show {
  		margin-top: 50px;
  	}
  </style>
</html>
